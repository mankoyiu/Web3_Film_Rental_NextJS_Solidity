"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/rentals/page",{

/***/ "(app-pages-browser)/./src/contexts/Web3Context.tsx":
/*!**************************************!*\
  !*** ./src/contexts/Web3Context.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Provider: () => (/* binding */ Web3Provider),\n/* harmony export */   useWeb3: () => (/* binding */ useWeb3)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/wagmi/dist/esm/hooks/useAccount.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/wagmi/dist/esm/hooks/useConnect.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/wagmi/dist/esm/hooks/useDisconnect.js\");\n/* harmony import */ var wagmi_connectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! wagmi/connectors */ \"(app-pages-browser)/./node_modules/@wagmi/core/dist/esm/connectors/injected.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var _services_rentalStorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/rentalStorage */ \"(app-pages-browser)/./src/services/rentalStorage.ts\");\n/* __next_internal_client_entry_do_not_use__ Web3Provider,useWeb3 auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n// Import ABI when available\nconst FILM_RENTAL_ABI = [\n    \"function addFilm(string memory _id, uint256 _rentalPrice) public\",\n    \"function rentFilm(string memory _filmId) public payable\",\n    \"function endRental(string memory _filmId) public\",\n    \"function getRentalPrice(string memory _filmId) public view returns (uint256)\",\n    \"function isFilmAvailable(string memory _filmId) public view returns (bool)\",\n    \"function getUserRentals(address _user) public view returns (tuple(string filmId, address renter, uint256 startTime, uint256 endTime, bool isActive)[] memory)\"\n];\n// Updated with the deployed contract address\nconst CONTRACT_ADDRESS = \"0x8D1517360886e85d8e94E3E64742A7637277c5f2\";\nconst Web3Context = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Local storage key for wallet connection state\nconst WALLET_CONNECTED_KEY = 'wallet_connected';\nfunction Web3Provider(param) {\n    let { children } = param;\n    _s();\n    const { address, isConnected } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useAccount)();\n    const { connectAsync } = (0,wagmi__WEBPACK_IMPORTED_MODULE_4__.useConnect)();\n    const { disconnect: wagmiDisconnect } = (0,wagmi__WEBPACK_IMPORTED_MODULE_5__.useDisconnect)();\n    const [contract, setContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [initialLoadComplete, setInitialLoadComplete] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Check localStorage on initial load\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Web3Provider.useEffect\": ()=>{\n            const checkStoredConnection = {\n                \"Web3Provider.useEffect.checkStoredConnection\": async ()=>{\n                    if (true) {\n                        const storedConnected = localStorage.getItem(WALLET_CONNECTED_KEY) === 'true';\n                        if (storedConnected && !isConnected) {\n                            try {\n                                // Try to reconnect wallet if it was previously connected\n                                await connectAsync({\n                                    connector: (0,wagmi_connectors__WEBPACK_IMPORTED_MODULE_6__.injected)()\n                                });\n                            } catch (err) {\n                                console.error('Failed to restore wallet connection:', err);\n                                localStorage.removeItem(WALLET_CONNECTED_KEY);\n                            }\n                        }\n                        setInitialLoadComplete(true);\n                    }\n                }\n            }[\"Web3Provider.useEffect.checkStoredConnection\"];\n            checkStoredConnection();\n        }\n    }[\"Web3Provider.useEffect\"], []);\n    // Update contract when connection changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Web3Provider.useEffect\": ()=>{\n            if (isConnected && address) {\n                // Save connection state to localStorage\n                if ( true && initialLoadComplete) {\n                    localStorage.setItem(WALLET_CONNECTED_KEY, 'true');\n                }\n                initializeContract();\n            } else {\n                setContract(null);\n                // Clear connection state from localStorage\n                if ( true && initialLoadComplete) {\n                    localStorage.removeItem(WALLET_CONNECTED_KEY);\n                }\n            }\n        }\n    }[\"Web3Provider.useEffect\"], [\n        isConnected,\n        address,\n        initialLoadComplete\n    ]);\n    const initializeContract = async ()=>{\n        try {\n            if ( false || !window.ethereum || !address) return;\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const contractInstance = new ethers__WEBPACK_IMPORTED_MODULE_8__.Contract(CONTRACT_ADDRESS, FILM_RENTAL_ABI, signer);\n            setContract(contractInstance);\n        } catch (err) {\n            setError('Failed to initialize contract: ' + ((err === null || err === void 0 ? void 0 : err.message) || err));\n        }\n    };\n    const connect = async ()=>{\n        setError(null);\n        try {\n            await connectAsync({\n                connector: (0,wagmi_connectors__WEBPACK_IMPORTED_MODULE_6__.injected)()\n            });\n        // Connection state is saved in the useEffect that watches isConnected\n        } catch (err) {\n            setError('Wallet connection failed: ' + ((err === null || err === void 0 ? void 0 : err.message) || err));\n        }\n    };\n    const disconnect = ()=>{\n        wagmiDisconnect();\n    // Connection state is cleared in the useEffect that watches isConnected\n    };\n    const rentFilm = async (filmId, price, filmTitle, filmPoster)=>{\n        if (!window.ethereum) throw new Error('No crypto wallet found. Please install MetaMask.');\n        if (!isConnected || !address) throw new Error('Wallet not connected');\n        try {\n            // Check if film is already rented by this user\n            if (true) {\n                const storedRentalsKey = \"rentals_\".concat(address.toLowerCase());\n                const storedRentals = localStorage.getItem(storedRentalsKey);\n                if (storedRentals) {\n                    const userRentals = JSON.parse(storedRentals);\n                    const now = new Date();\n                    // Check if this film is already in active rentals\n                    const isAlreadyRented = userRentals.some((rental)=>{\n                        return rental.filmId === filmId && new Date(rental.expiresAt) > now;\n                    });\n                    if (isAlreadyRented) {\n                        throw new Error('You have already rented this film. Check your rentals page to watch it.');\n                    }\n                }\n            }\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const userAddress = await signer.getAddress();\n            //ETH address that receive ETH from users\n            const adminAddress = '0xeC1f782d67575FE1E62078986b05a053bdD46602';\n            const ethBalance = await provider.getBalance(userAddress);\n            const priceWei = ethers__WEBPACK_IMPORTED_MODULE_9__.parseEther(price);\n            if (ethBalance < priceWei) {\n                throw new Error('Insufficient balance to rent this film.');\n            }\n            console.log('Renting film:', {\n                filmId,\n                price,\n                filmTitle\n            });\n            // Send ETH to admin\n            const tx = await signer.sendTransaction({\n                to: adminAddress,\n                value: priceWei\n            });\n            await tx.wait();\n            // Store rental information in localStorage\n            const now = Date.now();\n            const sevenDaysInMs = 7 * 24 * 60 * 60 * 1000;\n            const expiresAt = now + sevenDaysInMs;\n            const newRental = {\n                id: \"\".concat(filmId, \"-\").concat(now),\n                filmId: filmId,\n                title: filmTitle || \"Film \".concat(filmId),\n                poster: filmPoster || 'https://via.placeholder.com/300x450?text=Film',\n                rentedAt: new Date(now).toISOString(),\n                expiresAt: new Date(expiresAt).toISOString(),\n                status: 'active',\n                price: price\n            };\n            // Get existing rentals and add the new one\n            let userRentals = await (0,_services_rentalStorage__WEBPACK_IMPORTED_MODULE_2__.loadRentals)(userAddress);\n            userRentals.push(newRental);\n            // Save to both localStorage and server file storage\n            await (0,_services_rentalStorage__WEBPACK_IMPORTED_MODULE_2__.saveRentals)(userAddress, userRentals);\n            console.log('Rental saved to storage:', newRental);\n            // Update film rental count and revenue in films.json\n            try {\n                // Fetch current films data\n                const filmsResponse = await fetch('/api/films');\n                if (filmsResponse.ok) {\n                    const films = await filmsResponse.json();\n                    // Find the film that was rented\n                    const filmIndex = films.findIndex((film)=>film.id === filmId);\n                    if (filmIndex !== -1) {\n                        // Increment rental count\n                        films[filmIndex].rentals = (films[filmIndex].rentals || 0) + 1;\n                        // Add revenue (convert price string to number)\n                        films[filmIndex].revenue = (films[filmIndex].revenue || 0) + parseFloat(price);\n                        console.log(\"Updated film \".concat(filmId, \" rentals to \").concat(films[filmIndex].rentals, \" and revenue to \").concat(films[filmIndex].revenue));\n                        // Save updated films data back to the server\n                        await fetch('/api/films', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify(films)\n                        });\n                        console.log('Films data updated successfully');\n                    }\n                }\n            } catch (updateError) {\n                console.error('Error updating film rental statistics:', updateError);\n            // Continue execution even if statistics update fails\n            }\n            return tx;\n        } catch (err) {\n            var _err_message;\n            console.error('Failed to rent film:', err);\n            // Handle MetaMask user rejection\n            if ((err === null || err === void 0 ? void 0 : err.code) === 4001 || (err === null || err === void 0 ? void 0 : err.reason) === 'rejected' || (err === null || err === void 0 ? void 0 : (_err_message = err.message) === null || _err_message === void 0 ? void 0 : _err_message.includes('User denied transaction signature')) || (err === null || err === void 0 ? void 0 : err.code) === 'ACTION_REJECTED') {\n                throw new Error('Transaction cancelled by user.');\n            }\n            throw new Error((err === null || err === void 0 ? void 0 : err.message) || 'Failed to rent film.');\n        }\n    };\n    const endRental = async (filmId)=>{\n        // Web3 functionality temporarily disabled while we focus on traditional auth\n        console.log('Web3 functionality temporarily disabled');\n        throw new Error('Web3 functionality temporarily disabled');\n    /*\n    if (!contract) throw new Error('Contract not initialized')\n    try {\n      const tx = await contract.endRental(filmId)\n      await tx.wait()\n    } catch (error) {\n      console.error('Failed to end rental:', error)\n      throw error\n    }\n    */ };\n    const getFilmPrice = async (filmId)=>{\n        // Web3 functionality temporarily disabled while we focus on traditional auth\n        console.log('Web3 functionality temporarily disabled');\n        return '0.01' // Return a default price\n        ;\n    /*\n    if (!contract) throw new Error('Contract not initialized')\n    try {\n      const price = await contract.getRentalPrice(filmId)\n      const ethPrice = ethers.formatEther(price.toString())\n      return ethPrice\n    } catch (error) {\n      console.error('Failed to get film price:', error)\n      throw error\n    }\n    */ };\n    const isFilmAvailable = async (filmId)=>{\n        // Web3 functionality temporarily disabled while we focus on traditional auth\n        console.log('Web3 functionality temporarily disabled');\n        return true // Default to available\n        ;\n    /*\n    if (!contract) throw new Error('Contract not initialized')\n    try {\n      return await contract.isFilmAvailable(filmId)\n    } catch (error) {\n      console.error('Failed to check film availability:', error)\n      throw error\n    }\n    */ };\n    const getUserRentals = async ()=>{\n        if (!window.ethereum) throw new Error('No crypto wallet found. Please install MetaMask.');\n        if (!isConnected || !address) throw new Error('Wallet not connected');\n        try {\n            console.log('Fetching rentals for address:', address);\n            // Load rentals from both localStorage and server file storage\n            const userRentals = await (0,_services_rentalStorage__WEBPACK_IMPORTED_MODULE_2__.loadRentals)(address);\n            console.log('Retrieved rentals from storage:', userRentals);\n            return userRentals;\n        } catch (error) {\n            console.error('Failed to get user rentals:', error);\n            throw error;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Web3Context.Provider, {\n        value: {\n            isConnected,\n            account: address,\n            connect,\n            disconnect,\n            rentFilm,\n            endRental,\n            getFilmPrice,\n            isFilmAvailable,\n            getUserRentals,\n            contract\n        },\n        children: [\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    color: 'red',\n                    marginBottom: 8\n                },\n                children: [\n                    \"Wallet Error: \",\n                    error\n                ]\n            }, void 0, true, {\n                fileName: \"/Volumes/ssd/project/src/contexts/Web3Context.tsx\",\n                lineNumber: 312,\n                columnNumber: 17\n            }, this),\n            children\n        ]\n    }, void 0, true, {\n        fileName: \"/Volumes/ssd/project/src/contexts/Web3Context.tsx\",\n        lineNumber: 300,\n        columnNumber: 5\n    }, this);\n}\n_s(Web3Provider, \"5RX3IK99AMz7Wy7ih2z7+VKCA5I=\", false, function() {\n    return [\n        wagmi__WEBPACK_IMPORTED_MODULE_3__.useAccount,\n        wagmi__WEBPACK_IMPORTED_MODULE_4__.useConnect,\n        wagmi__WEBPACK_IMPORTED_MODULE_5__.useDisconnect\n    ];\n});\n_c = Web3Provider;\nfunction useWeb3() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Web3Context);\n    if (context === undefined) {\n        throw new Error('useWeb3 must be used within a Web3Provider');\n    }\n    return context;\n}\n_s1(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/Web3Context.tsx\n"));

/***/ })

});